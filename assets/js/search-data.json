{
  
    
        "post0": {
            "title": "Part I. Root-finding. Newton's iteration.",
            "content": "Write a function which performs Newton&#39;s iteration for a given function $f(x)$ with known derivative $f&#39;(x)$. Your function should find the root of $f(x)$ with a predefined absolute accuracy $ epsilon$. . def newton_iteration(f, fder, x0, eps=1e-5, maxiter=1000): &quot;&quot;&quot;Find a root of $f(x) = 0$ via Newton&#39;s iteration starting from x0. Parameters - f : callable The function to find a root of. fder : callable The derivative of `f`. x0 : float Initial value for the Newton&#39;s iteration. eps : float The target accuracy. The iteration stops when the distance between successive iterates is below `eps`. Default is 1e-5. maxiter : int The maximum number of iterations (default is 1000.) Iterations terminate if the number of iterations exceeds `maxiter`. This parameter is only needed to avoid infinite loops if iterations wander off. Returns - x : float The estimate for the root. niter : int The number of iterations. &quot;&quot;&quot; x = x0 for i in range (0,maxiter): xn = x - f(x)/fder(x) if (abs(xn-x) &lt; eps): return xn, i+1 x = xn return x, maxiter . Test I.1 . Test your implementation on a simple example, $f(x) = x^2 - 1$ or similar. (20% of the total grade) . newton_iteration(lambda x: pow(x,2)-1, lambda x: 2*x, -.7) . (-1.0000000000017693, 4) . Test I.2 . Now consider a function which has a multiple root. Take $f(x) = (x^2 - 1)^2$ as an example. Implement a modified Newton&#39;s iteraion, . $$ x_{n+1} = x_{n} - m frac{f(x_n)}{f&#39;(x_n)} $$and vary $m= 1, 2, 3, 4, 5$. Check the number of iterations required for convergence within a fixed $ epsilon$. Are your observations consistent with the expectation that the convergence is quadratic is $m$ equals the multiplicity of the root, and is linear otherwise? (40% of the total grade) . def modifiedNewton(f, fder, x0, m, eps=1e-5, maxiter=1000): # Same as newton_iteration above, but with included parameter m x = x0 for i in range(0,maxiter): xn = x - m*(f(x)/fder(x)) if (abs(xn-x) &lt; eps): return xn, i+1 xp = x x = xn return x, maxiter def f(x): return pow(pow(x,2)-1, 2) def fder(x): return 4*pow(x,3)-4*x for m in range(1,6): print(modifiedNewton(f, fder, 0.7, m)) . (0.999993656394025, 15) (1.0000000000017693, 4) (1.0000028723525891, 17) (0.6999999999999996, 1000) (1.6595581105793895, 1000) . The quadratic convergence for $m = 2$ is pretty evident above, compared to the linear convergence for $m = 1,3$. The method does not converge for $m=4,5$. . Below we plot the convergence for different values of $m$ and across different numbers of steps to qualitatively confirm the quadratic vs. linear convergence. The plot may not work depending on your installation, but you can see a nice quadratic shape in the $log$ of the residual for $m=2$, and a linear one otherwise. . import altair as alt import pandas as pd import math data = [] # Calculate the log of the residual |r - xn| against the number of iterations, for varying m for m in range(1,4): for steps in range(0,20): result = modifiedNewton(f, fder, 0.5, m, 1e-5, steps) error = abs(1.0 - result[0]) data.append([steps, math.log(error), m]) # Plot this data df = pd.DataFrame(data, columns=[&#39;Number of Iterations&#39;, &#39;log Distance from Root&#39;, &#39;m=&#39;]) df.reset_index() alt.Chart(df).mark_circle().encode( x=&#39;Number of Iterations&#39;, y=&#39;log Distance from Root&#39;, color=&#39;m=:N&#39;, ) . Part II. Fixed-point iteration . Consider the following equation: . $$ sqrt{x} = cos{x} $$Plot the left-hand side and right-hand side of this equation, and localize the root graphically. Estimate the location of the root by visual inspection of the plot. . Write a function which finds the solution using fixed-point iteration up to a predefined accuracy $ epsilon$. Compare the result to an estimate from a visual inspection. . Next, rewrite the fixed-point problem in the form . $$ x = x - alpha f(x) $$where $ alpha$ is the free parameter. Check the dependence of the number of iterations required for a given $ epsilon$ on $ alpha$. Compare your results to an expectation that the optimal value of $ alpha$ is given by . $$ alpha = frac{2}{m + M} $$where $0 &lt; m &lt; |f&#39;(x)| &lt; M$ over the localization interval. (40% of the total grade) . import numpy as np # Calculate y = sqrt(x)-cos(x) and its derivative for a range of values x = np.arange(0.0,2.0,0.01) y = pow(x,0.5)-np.cos(x) yPrime = 0.5*pow(x,-0.5)+np.sin(x) # Format this data in so Altair can parse it data2 = [] for i in range(0,len(x)): data2.append([x[i], y[i], &#39;y = sqrt(x) - cos(x)&#39;]) data2.append([x[i], yPrime[i], &#39;y &#39;&#39;]) df2 = pd.DataFrame(data2, columns=[&#39;x&#39;, &#39;y&#39;, &#39;Function&#39;]) df2.reset_index() # Plot this data alt.Chart(df2).mark_line().encode( x=alt.X(&#39;x:Q&#39;, axis=alt.Axis(offset=-46.15)), y=&#39;y:Q&#39;, color=&#39;Function:N&#39; ) . /usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:6: RuntimeWarning: divide by zero encountered in power . Visually, we can estimate the root to be at approximately $x=0.635$. First, a sanity check: . def g(x): return pow(x,0.5) - np.cos(x) def gder(x): return 0.5*pow(x,-0.5) + np.sin(x) g(0.635) . -0.008202823948001425 . Pretty good, but let&#39;s try to do better with fixed point iteration: . def generalFPI(g, x0, alpha, eps=1e-10, maxiter=1000): x = x0 for i in range(0, maxiter): xn = x - alpha*g(x) if (abs(xn-x) &lt; eps): return xn, i x = xn return x, maxiter result = generalFPI(g, 0.635, 1) root = result[0] print(result) . (0.6417143708679357, 13) . g(root) . -6.04882810506524e-12 . This estimate for the root is about seven orders of magnitude better than the visual estimate &mdash; a pretty good improvement. Now we plot the number of steps until convergence ($|x_{n-1} - x_{n}| &lt; epsilon = 1*10^{-10}$) against the parameter $ alpha$: . # Calculate the number of steps to convergence for a range of alpha parameters data3 = [] alpha = np.arange(0.1,1.6,0.02) for a in alpha: result = generalFPI(g, 0.635, a) data3.append([a,result[1]]) # Plot this data df3 = pd.DataFrame(data3, columns=[&#39;alpha&#39;, &#39;Number of Iterations&#39;]) df3.reset_index() alt.Chart(df3).mark_line().encode( x=&#39;alpha&#39;, y=&#39;Number of Iterations&#39; ) . This gives us an optimum value for $ alpha$ of around $0.82$. Since the value of $ frac{dy}{dx} sqrt{x} - cos(x)$ is close to $1.2$ when $x$ is close to the root, this agrees with the analysis that $ alpha_{opt} = frac{2}{m+M}$: . print(gder(root)) print(2/(2*gder(root))) . 1.2227342355430186 0.8178392089887776 . Part III. Newton&#39;s fractal. . (Not graded). . Consider the equation . $$ x^3 = 1 $$It has three solutions in the complex plane, $x_k = exp(i , 2 pi k/ 3)$, $k = 0, 1, 2$. . The Newton&#39;s iterations converge to one of these solutions, depending on the starting point in the complex plane (to converge to a complex-valued solution, the iteration needs a complex-valued starting point). . Plot the emph{basins of attraction} of these roots on the complex plane of $x$ (i.e., on the plane $ mathrm{Re}x$ -- $ mathrm{Im}x$). To this end, make a series of calculations, varying the initial conditions on a grid of points. Color the grid in three colors, according to the root, to which iterations converged. . import cmath # Define the equation and its derivative def h(x): return pow(x,3.0) - 1.0 def hder(x): return 3.0*pow(x,2.0) # Returns the a root if the input is very close to that root roots = [0.0,1.0,2.0] roots = list(map(lambda k: cmath.exp(1j*2.0*np.pi*k/3.0), roots)) rootNames = {0 : &quot;1 + 0i&quot;, 1 : &quot;-0.5 + 0.866i&quot;, 2 : &quot;-0.5 - 0.866i&quot;} def isRoot(z): for i in range(0,3): if (abs(roots[i]-z) &lt; 1e-7): return rootNames[i] return &quot;No convergence&quot; # Initialize a grid of values x = np.arange(-1,1,0.01) y = np.arange(-1,1,0.01) rPart, iPart = np.meshgrid(x, y) # Returns the basin of attraction for given real and imaginary part def getBasin(r,i): z = complex(r,i) return isRoot(newton_iteration(h, hder, z, 1e-8)[0]) # Vectorize this function and apply it to our grid vectorGetBasin = np.vectorize(getBasin) basins = vectorGetBasin(rPart, iPart) # Convert this grid to columnar data expected by Altair df4 = pd.DataFrame({&#39;x&#39;: rPart.ravel(), &#39;i&#39;: iPart.ravel(), &#39;Root&#39;: basins.ravel()}) # Plot this data (warning, may be slow) alt.data_transformers.disable_max_rows() w = 600 h = w s = pow(w/len(rPart),2) alt.Chart(df4).mark_square(size=s).encode( x=&#39;x:Q&#39;, y=&#39;i:Q&#39;, color=&#39;Root:N&#39; ).properties( width=w, height=h ) .",
            "url": "https://buggins333.github.io/myfastpages/2020/05/11/Iteration.html",
            "relUrl": "/2020/05/11/Iteration.html",
            "date": " • May 11, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Wild Magic Surges",
            "content": "A Comparison of Two Homebrew Methods . In order to make wild magic surges a more frequent occurence, we can tweak the rules to trigger them. Two such tweaks are: . The &quot;Increasing Count&quot; method. Start as usual with a Wild Magic Surge triggering when the player rolls a 1 on their Surge roll. Every time a Surge does not occur, increase the D.C. for avoiding the Surge by one: 1 $ rightarrow$ 2 $ rightarrow$ 3, etc. When a Surge does occur, reset the D.C. to 1. . | The &quot;Decreasing Dice&quot; method. Start as usual with a Wild Magic Surge triggering when the player rolls a 1 on their d20 Surge roll. Every time a surge does not occur, decrease the size of the dice by one: d20 $ rightarrow$ d12 $ rightarrow$ d10, etc. When a Surge does occur, reset the dice to a d20. Here we stop at a d4 and just make the player continue rolling a d4 until they do get a Surge, but you could continue down to a coin flip (d2), and you could even continue from a coin flip to an automatic Surge (rolling a 1 on a &quot;d1&quot;). . | Below we calculate the probabilities of triggering a Wild Magic Surge under both of the above systems. . import numpy as np import pandas as pd import altair as alt dice = [20, 12, 10, 8, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4] count = [*range(1,21)] . First, we build a list of probabilities for not rolling a 1 on each of the dice: d20, d12, d10, ..., d4 . diceP = list(map(lambda x: 1-(1/x), dice)) . We also build a list of probabilities for not rolling (1), (1/2), (1/2/3), etc. on a d20: . countP = list(map(lambda x: 1-(x/20), count)) . Then we multiply the first $i$ probabilities together &mdash; for $i = 1,2,3, dots , 20$ &mdash; to get the probability of going $i$ rolls without a Wild Magic Surge under either system: . diceCDF = [] countCDF = [] for i in range(1,21): diceCDF.append(np.prod(diceP[:i])) countCDF.append(np.prod(countP[:i])) . Lastly, because it&#39;s more intuitive to think about it this way, we subtract each of these probabilities from $1$ to get the probability of encountering a surge in $x$ number of rolls: . diceCDF = list(map(lambda x: 1-x, diceCDF)) countCDF = list(map(lambda x: 1-x, countCDF)) data = [] for i in range(0, len(diceCDF)): data.append([i+1, diceCDF[i], &#39;Decreasing Dice&#39;]) data.append([i+1, countCDF[i], &#39;Increasing Count&#39;]) . And now, the fun part, we plot the results! . #collapse df = pd.DataFrame(data, columns=[&#39;Number of Rolls&#39;, &#39;Probability&#39;, &#39;Method&#39;]) df.reset_index() # Create a selection that chooses the nearest point &amp; selects based on x-value nearest = alt.selection(type=&#39;single&#39;, nearest=True, on=&#39;mouseover&#39;, fields=[&#39;Number of Rolls&#39;], empty=&#39;none&#39;) points = alt.Chart(df).mark_circle().encode( x=&#39;Number of Rolls:O&#39;, y=alt.Y(&#39;Probability&#39;, title=&#39;Probability of a Surge&#39;), color=&#39;Method&#39;, opacity=alt.condition(nearest, alt.value(1), alt.value(.6)) ) # Transparent selectors across the chart. This is what tells us # the x-value of the cursor selectors = alt.Chart(df).mark_point().encode( x=&#39;Number of Rolls:O&#39;, opacity=alt.value(0), ).add_selection( nearest ) # Draw text labels near the points, and highlight based on selection text = points.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=alt.condition(nearest, &#39;Probability:Q&#39;,alt.value(&#39; &#39;)) ) # Draw a rule at the location of the selection rules = alt.Chart(df).mark_rule(color=&#39;gray&#39;).encode( x=&#39;Number of Rolls:O&#39;, ).transform_filter( nearest ) # Put the five layers into a chart and bind the data alt.layer( selectors, points, rules, text ).properties( width=600, height=300 ) . . Lastly, here is the same data, but in a table view: . df.pivot(index=&#39;Number of Rolls&#39;, columns=&#39;Method&#39;) . Probability . Method Decreasing Dice Increasing Count . Number of Rolls . 1 0.050000 | 0.050000 | . 2 0.129167 | 0.145000 | . 3 0.216250 | 0.273250 | . 4 0.314219 | 0.418600 | . 5 0.428516 | 0.563950 | . 6 0.571387 | 0.694765 | . 7 0.678540 | 0.801597 | . 8 0.758905 | 0.880958 | . 9 0.819179 | 0.934527 | . 10 0.864384 | 0.967264 | . 11 0.898288 | 0.985269 | . 12 0.923716 | 0.994107 | . 13 0.942787 | 0.997938 | . 14 0.957090 | 0.999381 | . 15 0.967818 | 0.999845 | . 16 0.975863 | 0.999969 | . 17 0.981897 | 0.999995 | . 18 0.986423 | 1.000000 | . 19 0.989817 | 1.000000 | . 20 0.992363 | 1.000000 | .",
            "url": "https://buggins333.github.io/myfastpages/dnd/jupyter/2020/05/03/Wild-Magic-Surges.html",
            "relUrl": "/dnd/jupyter/2020/05/03/Wild-Magic-Surges.html",
            "date": " • May 3, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://buggins333.github.io/myfastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://buggins333.github.io/myfastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Me, Myself, and $ xi$ . This is the (brand new) personal blog of Bobby Huggins. I intend for it to serve as a landing page for various exercises and musings with a mathematical or computational bent. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://buggins333.github.io/myfastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://buggins333.github.io/myfastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}